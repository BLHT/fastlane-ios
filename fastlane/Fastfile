# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

before_all do |lane, options|
  # git_pull
  # ENV['MAILGUN_SANDBOX_POSTMASTER'] = 'issenn@sandboxc3b6b7d6022b484eabc7c39f728536a5.mailgun.org'
  # ENV['MAILGUN_APIKEY'] = '5d21a2e0cce1996b200d8f991d72856d-a4502f89-ce938adb'
  # ENV['FIR_APP_TOKEN'] = '9611b6a99d280463039cbb64b7eb24ca'
  # ENV["GIT_BRANCH"] = git_branch
  ENV['CHANGELOG'] = read_changelog(
    changelog_path: './CHANGELOG.md', # Specify path to CHANGELOG.md
    section_identifier: '[Unreleased]', # Specify what section to read
    excluded_markdown_elements: ['-', '###']  # Specify which markdown elements should be excluded
  )
  slack(
    message: "Hi! @channel \r\n A new build start",
    default_payloads: [:git_branch, :lane, :git_author]
  )
  send_e_mail(
    stmp_server: "smtp.exmail.qq.com",
    user_name: "update@hellotalk.com",
    password: "Hello123",
    subject: "default",
    message_body: "Hi! @issenn"
  )
end

before_each do |lane, options|
  # ...
end

lane :run_test do |options|
  prepare_lane_options(
    options: options,
    bind_params: [
      Actions::BindParamBuilder.new(:test_scheme).env_var("TEST_SCHEME").ci_required().build(),
      Actions::BindParamBuilder.new(:xcworkspace).env_var("XCWORKSPACE").build(),
      Actions::BindParamBuilder.new(:xcodeproj).env_var("XCODEPROJ").build()
    ]
  )
  puts options[:test_scheme]
  puts options[:xcworkspace]
  puts options[:xcodeproj]
=begin
  if files_matching(pattern: "Podfile") != nil
    cocoapods(
      repo_update: true
    )
  end
  scan(
    workspace: options[:xcworkspace],
    project: options[:xcodeproj],
    scheme: options[:test_scheme],
    slack_only_on_failure: (git_branch() != git_get_master_branch()),
    clean: true
  )
=end
end


after_each do |lane, options|
  # ...
end

after_all do |lane, options|
  slack(
    message: "Hi! @channel \r\n A new build end",
    default_payloads: [:git_branch, :lane, :git_author]
  )
end

error do |lane, exception, options|
  if options[:debug]
    puts "Hi :)"
  end
  UI.message(exception.message)
end
